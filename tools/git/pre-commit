#!/bin/sh
PROJECT=`php -r "echo dirname(dirname(dirname(realpath('$0'))));"`
PHPCS_BIN=$PROJECT/bin/phpcs
RULESET_PATH=$PROJECT/tools/phpcs.xml
TMP_STAGING=$PROJECT/.tmp_staging

FILES_TO_CHECK=`git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\\\.php`

if [ "$FILES_TO_CHECK" == "" ]; then
    exit 0
fi

# create temporary copy of staging area
if [ -e $TMP_STAGING ]; then
    rm -rf $TMP_STAGING
fi
mkdir $TMP_STAGING

# Copy contents of staged version of files to temporary staging area
# because we only want the staged version that will be commited and not
# the version in the working directory
STAGED_FILES=""
for FILE in $FILES_TO_CHECK
do
  ID=$(git diff-index --cached HEAD $FILE | cut -d " " -f4)

  # create staged version of file in temporary staging area with the same
  # path as the original file so that the phpcs ignore filters can be applied
  mkdir -p "$TMP_STAGING/$(dirname $FILE)"
  git cat-file blob $ID > "$TMP_STAGING/$FILE"
  STAGED_FILES="$STAGED_FILES $TMP_STAGING/$FILE"
done


echo "Checking PHP Lint..."
for FILE in $STAGED_FILES
do
    echo $FILE
    php -l -d display_errors=1 $FILE
    if [ $? != 0 ]
    then
        echo "Fix the error before commit."
        exit 1
    fi

    if [[ ! -z $(grep "debug(\|var_dump(\|die(" $FILE) ]]; then
        echo "Commit contains debug calls!"
        exit 1
    fi
done

# simple check if code sniffer is set up correctly
if [ ! -x $PHPCS_BIN ]; then
    echo "PHP CodeSniffer bin not found or executable -> $PHPCS_BIN"
    echo "Warning: Skipping PHPCS check."
    rm -rf $TMP_STAGING
    exit 0
fi

echo "Running Code Sniffer..."
./bin/phpcs --standard=$RULESET_PATH --encoding=utf-8 -n -p $TMP_STAGING
if [ $? != 0 ]
then
    echo "Fix the error before commit."
    exit 1
fi

rm -rf $TMP_STAGING

exit 0
